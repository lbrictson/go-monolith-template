// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPasswordHash holds the string denoting the password_hash field in the database.
	FieldPasswordHash = "password_hash"
	// FieldMfaSecret holds the string denoting the mfa_secret field in the database.
	FieldMfaSecret = "mfa_secret"
	// FieldMfaEnabled holds the string denoting the mfa_enabled field in the database.
	FieldMfaEnabled = "mfa_enabled"
	// FieldLastLogin holds the string denoting the last_login field in the database.
	FieldLastLogin = "last_login"
	// FieldInvited holds the string denoting the invited field in the database.
	FieldInvited = "invited"
	// FieldLocked holds the string denoting the locked field in the database.
	FieldLocked = "locked"
	// FieldLockedAt holds the string denoting the locked_at field in the database.
	FieldLockedAt = "locked_at"
	// FieldAPIKey holds the string denoting the api_key field in the database.
	FieldAPIKey = "api_key"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// Table holds the table name of the user in the database.
	Table = "users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldEmail,
	FieldPasswordHash,
	FieldMfaSecret,
	FieldMfaEnabled,
	FieldLastLogin,
	FieldInvited,
	FieldLocked,
	FieldLockedAt,
	FieldAPIKey,
	FieldRole,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultMfaSecret holds the default value on creation for the "mfa_secret" field.
	DefaultMfaSecret string
	// DefaultMfaEnabled holds the default value on creation for the "mfa_enabled" field.
	DefaultMfaEnabled bool
	// DefaultInvited holds the default value on creation for the "invited" field.
	DefaultInvited bool
	// DefaultLocked holds the default value on creation for the "locked" field.
	DefaultLocked bool
	// DefaultRole holds the default value on creation for the "role" field.
	DefaultRole string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPasswordHash orders the results by the password_hash field.
func ByPasswordHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordHash, opts...).ToFunc()
}

// ByMfaSecret orders the results by the mfa_secret field.
func ByMfaSecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMfaSecret, opts...).ToFunc()
}

// ByMfaEnabled orders the results by the mfa_enabled field.
func ByMfaEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMfaEnabled, opts...).ToFunc()
}

// ByLastLogin orders the results by the last_login field.
func ByLastLogin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLogin, opts...).ToFunc()
}

// ByInvited orders the results by the invited field.
func ByInvited(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvited, opts...).ToFunc()
}

// ByLocked orders the results by the locked field.
func ByLocked(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocked, opts...).ToFunc()
}

// ByLockedAt orders the results by the locked_at field.
func ByLockedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLockedAt, opts...).ToFunc()
}

// ByAPIKey orders the results by the api_key field.
func ByAPIKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPIKey, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}
