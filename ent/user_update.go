// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-monolith-template/ent/predicate"
	"go-monolith-template/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetPasswordHash sets the "password_hash" field.
func (uu *UserUpdate) SetPasswordHash(s string) *UserUpdate {
	uu.mutation.SetPasswordHash(s)
	return uu
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePasswordHash(s *string) *UserUpdate {
	if s != nil {
		uu.SetPasswordHash(*s)
	}
	return uu
}

// SetMfaSecret sets the "mfa_secret" field.
func (uu *UserUpdate) SetMfaSecret(s string) *UserUpdate {
	uu.mutation.SetMfaSecret(s)
	return uu
}

// SetNillableMfaSecret sets the "mfa_secret" field if the given value is not nil.
func (uu *UserUpdate) SetNillableMfaSecret(s *string) *UserUpdate {
	if s != nil {
		uu.SetMfaSecret(*s)
	}
	return uu
}

// SetMfaEnabled sets the "mfa_enabled" field.
func (uu *UserUpdate) SetMfaEnabled(b bool) *UserUpdate {
	uu.mutation.SetMfaEnabled(b)
	return uu
}

// SetNillableMfaEnabled sets the "mfa_enabled" field if the given value is not nil.
func (uu *UserUpdate) SetNillableMfaEnabled(b *bool) *UserUpdate {
	if b != nil {
		uu.SetMfaEnabled(*b)
	}
	return uu
}

// SetLastLogin sets the "last_login" field.
func (uu *UserUpdate) SetLastLogin(t time.Time) *UserUpdate {
	uu.mutation.SetLastLogin(t)
	return uu
}

// SetNillableLastLogin sets the "last_login" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastLogin(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastLogin(*t)
	}
	return uu
}

// ClearLastLogin clears the value of the "last_login" field.
func (uu *UserUpdate) ClearLastLogin() *UserUpdate {
	uu.mutation.ClearLastLogin()
	return uu
}

// SetInvited sets the "invited" field.
func (uu *UserUpdate) SetInvited(b bool) *UserUpdate {
	uu.mutation.SetInvited(b)
	return uu
}

// SetNillableInvited sets the "invited" field if the given value is not nil.
func (uu *UserUpdate) SetNillableInvited(b *bool) *UserUpdate {
	if b != nil {
		uu.SetInvited(*b)
	}
	return uu
}

// SetLocked sets the "locked" field.
func (uu *UserUpdate) SetLocked(b bool) *UserUpdate {
	uu.mutation.SetLocked(b)
	return uu
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLocked(b *bool) *UserUpdate {
	if b != nil {
		uu.SetLocked(*b)
	}
	return uu
}

// SetLockedAt sets the "locked_at" field.
func (uu *UserUpdate) SetLockedAt(t time.Time) *UserUpdate {
	uu.mutation.SetLockedAt(t)
	return uu
}

// SetNillableLockedAt sets the "locked_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLockedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLockedAt(*t)
	}
	return uu
}

// ClearLockedAt clears the value of the "locked_at" field.
func (uu *UserUpdate) ClearLockedAt() *UserUpdate {
	uu.mutation.ClearLockedAt()
	return uu
}

// SetAPIKey sets the "api_key" field.
func (uu *UserUpdate) SetAPIKey(s string) *UserUpdate {
	uu.mutation.SetAPIKey(s)
	return uu
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAPIKey(s *string) *UserUpdate {
	if s != nil {
		uu.SetAPIKey(*s)
	}
	return uu
}

// SetRole sets the "role" field.
func (uu *UserUpdate) SetRole(s string) *UserUpdate {
	uu.mutation.SetRole(s)
	return uu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRole(s *string) *UserUpdate {
	if s != nil {
		uu.SetRole(*s)
	}
	return uu
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
	}
	if value, ok := uu.mutation.MfaSecret(); ok {
		_spec.SetField(user.FieldMfaSecret, field.TypeString, value)
	}
	if value, ok := uu.mutation.MfaEnabled(); ok {
		_spec.SetField(user.FieldMfaEnabled, field.TypeBool, value)
	}
	if value, ok := uu.mutation.LastLogin(); ok {
		_spec.SetField(user.FieldLastLogin, field.TypeTime, value)
	}
	if uu.mutation.LastLoginCleared() {
		_spec.ClearField(user.FieldLastLogin, field.TypeTime)
	}
	if value, ok := uu.mutation.Invited(); ok {
		_spec.SetField(user.FieldInvited, field.TypeBool, value)
	}
	if value, ok := uu.mutation.Locked(); ok {
		_spec.SetField(user.FieldLocked, field.TypeBool, value)
	}
	if value, ok := uu.mutation.LockedAt(); ok {
		_spec.SetField(user.FieldLockedAt, field.TypeTime, value)
	}
	if uu.mutation.LockedAtCleared() {
		_spec.ClearField(user.FieldLockedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.APIKey(); ok {
		_spec.SetField(user.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := uu.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetPasswordHash sets the "password_hash" field.
func (uuo *UserUpdateOne) SetPasswordHash(s string) *UserUpdateOne {
	uuo.mutation.SetPasswordHash(s)
	return uuo
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePasswordHash(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPasswordHash(*s)
	}
	return uuo
}

// SetMfaSecret sets the "mfa_secret" field.
func (uuo *UserUpdateOne) SetMfaSecret(s string) *UserUpdateOne {
	uuo.mutation.SetMfaSecret(s)
	return uuo
}

// SetNillableMfaSecret sets the "mfa_secret" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMfaSecret(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetMfaSecret(*s)
	}
	return uuo
}

// SetMfaEnabled sets the "mfa_enabled" field.
func (uuo *UserUpdateOne) SetMfaEnabled(b bool) *UserUpdateOne {
	uuo.mutation.SetMfaEnabled(b)
	return uuo
}

// SetNillableMfaEnabled sets the "mfa_enabled" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMfaEnabled(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetMfaEnabled(*b)
	}
	return uuo
}

// SetLastLogin sets the "last_login" field.
func (uuo *UserUpdateOne) SetLastLogin(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastLogin(t)
	return uuo
}

// SetNillableLastLogin sets the "last_login" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastLogin(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastLogin(*t)
	}
	return uuo
}

// ClearLastLogin clears the value of the "last_login" field.
func (uuo *UserUpdateOne) ClearLastLogin() *UserUpdateOne {
	uuo.mutation.ClearLastLogin()
	return uuo
}

// SetInvited sets the "invited" field.
func (uuo *UserUpdateOne) SetInvited(b bool) *UserUpdateOne {
	uuo.mutation.SetInvited(b)
	return uuo
}

// SetNillableInvited sets the "invited" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableInvited(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetInvited(*b)
	}
	return uuo
}

// SetLocked sets the "locked" field.
func (uuo *UserUpdateOne) SetLocked(b bool) *UserUpdateOne {
	uuo.mutation.SetLocked(b)
	return uuo
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLocked(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetLocked(*b)
	}
	return uuo
}

// SetLockedAt sets the "locked_at" field.
func (uuo *UserUpdateOne) SetLockedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLockedAt(t)
	return uuo
}

// SetNillableLockedAt sets the "locked_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLockedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLockedAt(*t)
	}
	return uuo
}

// ClearLockedAt clears the value of the "locked_at" field.
func (uuo *UserUpdateOne) ClearLockedAt() *UserUpdateOne {
	uuo.mutation.ClearLockedAt()
	return uuo
}

// SetAPIKey sets the "api_key" field.
func (uuo *UserUpdateOne) SetAPIKey(s string) *UserUpdateOne {
	uuo.mutation.SetAPIKey(s)
	return uuo
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAPIKey(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAPIKey(*s)
	}
	return uuo
}

// SetRole sets the "role" field.
func (uuo *UserUpdateOne) SetRole(s string) *UserUpdateOne {
	uuo.mutation.SetRole(s)
	return uuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRole(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetRole(*s)
	}
	return uuo
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
	}
	if value, ok := uuo.mutation.MfaSecret(); ok {
		_spec.SetField(user.FieldMfaSecret, field.TypeString, value)
	}
	if value, ok := uuo.mutation.MfaEnabled(); ok {
		_spec.SetField(user.FieldMfaEnabled, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.LastLogin(); ok {
		_spec.SetField(user.FieldLastLogin, field.TypeTime, value)
	}
	if uuo.mutation.LastLoginCleared() {
		_spec.ClearField(user.FieldLastLogin, field.TypeTime)
	}
	if value, ok := uuo.mutation.Invited(); ok {
		_spec.SetField(user.FieldInvited, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.Locked(); ok {
		_spec.SetField(user.FieldLocked, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.LockedAt(); ok {
		_spec.SetField(user.FieldLockedAt, field.TypeTime, value)
	}
	if uuo.mutation.LockedAtCleared() {
		_spec.ClearField(user.FieldLockedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.APIKey(); ok {
		_spec.SetField(user.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeString, value)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
